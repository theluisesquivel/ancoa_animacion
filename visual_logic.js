/**
 * Generated by Verge3D Puzzles v.3.3.1
 * Wed Sep 23 2020 11:59:26 GMT-0300 (hora de verano de Chile)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickCallbacks = [];
_pGlob.pickedObject = '';
_pGlob.objHoverCallbacks = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.promiseValue = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

_pGlob.wooProductInfo = {};

var _pPhysics = {};

_pPhysics.tickCallbacks = [];
_pPhysics.syncList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};

PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    
    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {
initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type !== "AmbientLight" && obj.name !== ""
            && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// show and hide puzzles
function changeVis(objNames, bool) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



// getAnimations puzzle
function getAnimations(objNames) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    var animations = [];
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setCSSRuleStyle puzzle
function setCSSRuleStyle(prop, value, id, isParent, mediaRule) {
    var styles = (isParent) ? parent.document.styleSheets : document.styleSheets;
    for (var i = 0; i < styles.length; i++) {
        /**
         * workaround for "DOMException: Failed to read the 'cssRules' property
         * from 'CSSStyleSheet': Cannot access rules"
         */
        try { var cssRules = styles[i].cssRules; }
        catch (e) { continue; }

        for (var j = 0; j < cssRules.length; j++) {
            var cssRule = cssRules[j];
            if (!mediaRule && cssRule.selectorText == id)
                cssRule.style[prop] = value;
            else if (mediaRule && cssRule.conditionText == mediaRule) {
                var cssRulesMedia = cssRule.cssRules;
                for (var k = 0; k < cssRulesMedia.length; k++) {
                    if (cssRulesMedia[k].selectorText == id)
                        cssRulesMedia[k].style[prop] = value;
                }
            }
        }
    }
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}



eventHTMLElem('click', 'm-completo', true, function(event) {
  changeVis(['ALL_OBJECTS'], true);

  operateAnimation('PLAY', getAnimations(['ALL_OBJECTS']), 840, 840, 'LoopOnce', 1,
          function() {}, undefined, false);

      setCSSRuleStyle('display', 'none', '.barra-lateral', true,);
});
eventHTMLElem('click', 'm-armado', true, function(event) {
  setCSSRuleStyle('display', 'block', '.barra-lateral', true,);
  setCSSRuleStyle('borderColor', '#8B93AA', '#paso1', true,);
  setCSSRuleStyle('borderColor', '#8B93AA', '#paso2', true,);
  setCSSRuleStyle('borderColor', '#8B93AA', '#paso3', true,);
  setCSSRuleStyle('borderColor', '#8B93AA', '#paso4', true,);
  setCSSRuleStyle('borderColor', '#8B93AA', '#paso5', true,);
  setCSSRuleStyle('borderColor', '#8B93AA', '#paso6', true,);
  setCSSRuleStyle('borderColor', '#8B93AA', '#paso7', true,);
  setCSSRuleStyle('borderColor', '#8B93AA', '#paso8', true,);
  setCSSRuleStyle('borderColor', '#8B93AA', '#paso9', true,);
  setCSSRuleStyle('borderColor', '#8B93AA', '#paso10', true,);
  setCSSRuleStyle('borderColor', '#8B93AA', '#paso11', true,);
  setCSSRuleStyle('borderColor', '#8B93AA', '#paso12', true,);
  setCSSRuleStyle('borderColor', '#8B93AA', '#paso13', true,);
  setCSSRuleStyle('borderColor', '#8B93AA', '#paso14', true,);
  changeVis('02_SoporteRapido_Base', false);
  changeVis('03_SoporteRapido_Verticales', false);
  changeVis('04_SoporteRapido_Horizontales', false);
  changeVis('05_PernosNivelantes', false);
  changeVis('06_Pasarela_Estructura', false);
  changeVis('07_Pasarela_Madera', false);
  changeVis('01_Colector', false);
  changeVis('02_Rápido_Tramo1', false);
  changeVis('03_Rápido_Tramo2', false);
  changeVis('05_Rápido_Tramo3', false);
  changeVis('07_Rápido_Tramo4', false);
  changeVis('09_Rápido_Tramo5', false);
  changeVis('11_Rápido_Tramo6', false);
  changeVis('04_PernosFlanches', false);
  changeVis('06_PernosFlanches', false);
  changeVis('08_PernosFlanches', false);
  changeVis('10_PernosFlanches', false);
  changeVis('12_PernosFlanches_Optimizados', false);
  changeVis('08_Pasarela_Baranda', false);

  operateAnimation('PLAY', getAnimations(['ALL_OBJECTS']), 840, 840, 'LoopOnce', 1,
          function() {}, undefined, false);

      });
eventHTMLElem('click', 'paso1', true, function(event) {
  changeVis('02_SoporteRapido_Base', true);

  operateAnimation('PLAY', getAnimations('02_SoporteRapido_Base'), 0, 60, 'LoopOnce', 1,
          function() {}, undefined, false);

      setCSSRuleStyle('borderColor', '#4BE5C5', '#paso1', true,);
  setCSSRuleStyle('backgroundColor', '#CC2264', '#paso1', true,);
  setCSSRuleStyle('color', '#ffffff', '#paso1-t', true,);
  setCSSRuleStyle('fontWeight', '700', '#paso1-t', true,);
  setCSSRuleStyle('fontStyle', 'normal', '#paso1-t', true,);
});
eventHTMLElem('click', 'paso2', true, function(event) {
  changeVis('03_SoporteRapido_Verticales', true);

  operateAnimation('PLAY', getAnimations('03_SoporteRapido_Verticales'), 60, 120, 'LoopOnce', 1,
          function() {}, undefined, false);

      setCSSRuleStyle('borderColor', '#4BE5C5', '#paso2', true,);
  setCSSRuleStyle('backgroundColor', '#CC2264', '#paso2', true,);
  setCSSRuleStyle('color', '#ffffff', '#paso2-t', true,);
  setCSSRuleStyle('fontWeight', '700', '#paso2-t', true,);
  setCSSRuleStyle('fontStyle', 'normal', '#paso2-t', true,);
  setCSSRuleStyle('backgroundColor', '', '#paso1', true,);
  setCSSRuleStyle('color', '#4BE5C5', '#paso1-t', true,);
  setCSSRuleStyle('fontWeight', '400', '#paso1-t', true,);
  setCSSRuleStyle('borderColor', '#4BE5C5', '#paso2', true,);
});
eventHTMLElem('click', 'paso3', true, function(event) {
  changeVis('04_SoporteRapido_Horizontales', true);

  operateAnimation('PLAY', getAnimations('04_SoporteRapido_Horizontales'), 120, 180, 'LoopOnce', 1,
          function() {}, undefined, false);

      setCSSRuleStyle('borderColor', '#4BE5C5', '#paso3', true,);
  setCSSRuleStyle('backgroundColor', '#CC2264', '#paso3', true,);
  setCSSRuleStyle('color', '#ffffff', '#paso3-t', true,);
  setCSSRuleStyle('fontWeight', '700', '#paso3-t', true,);
  setCSSRuleStyle('fontStyle', 'normal', '#paso3-t', true,);
  setCSSRuleStyle('backgroundColor', '', '#paso2', true,);
  setCSSRuleStyle('color', '#4BE5C5', '#paso2-t', true,);
  setCSSRuleStyle('fontWeight', '400', '#paso2-t', true,);
  setCSSRuleStyle('borderColor', '#4BE5C5', '#paso3', true,);
});
eventHTMLElem('click', 'paso4', true, function(event) {
  changeVis('05_PernosNivelantes', true);

  operateAnimation('PLAY', getAnimations('05_PernosNivelantes'), 180, 240, 'LoopOnce', 1,
          function() {}, undefined, false);

      setCSSRuleStyle('borderColor', '#4BE5C5', '#paso4', true,);
  setCSSRuleStyle('backgroundColor', '#CC2264', '#paso4', true,);
  setCSSRuleStyle('color', '#ffffff', '#paso4-t', true,);
  setCSSRuleStyle('fontWeight', '700', '#paso4-t', true,);
  setCSSRuleStyle('fontStyle', 'normal', '#paso4-t', true,);
  setCSSRuleStyle('backgroundColor', '', '#paso3', true,);
  setCSSRuleStyle('borderColor', '#4BE5C5', '#paso4', true,);
  setCSSRuleStyle('color', '#4BE5C5', '#paso3-t', true,);
  setCSSRuleStyle('fontWeight', '400', '#paso3-t', true,);
});
eventHTMLElem('click', 'paso5', true, function(event) {
  changeVis('06_Pasarela_Estructura', true);

  operateAnimation('PLAY', getAnimations('06_Pasarela_Estructura'), 240, 300, 'LoopOnce', 1,
          function() {}, undefined, false);

      setCSSRuleStyle('borderColor', '#4BE5C5', '#paso5', true,);
  setCSSRuleStyle('backgroundColor', '#CC2264', '#paso5', true,);
  setCSSRuleStyle('color', '#ffffff', '#paso5-t', true,);
  setCSSRuleStyle('fontWeight', '700', '#paso5-t', true,);
  setCSSRuleStyle('fontStyle', 'normal', '#paso5-t', true,);
  setCSSRuleStyle('backgroundColor', '', '#paso4', true,);
  setCSSRuleStyle('borderColor', '#4BE5C5', '#paso4', true,);
  setCSSRuleStyle('color', '#4BE5C5', '#paso4-t', true,);
  setCSSRuleStyle('fontWeight', '400', '#paso4-t', true,);
});
eventHTMLElem('click', 'paso6', true, function(event) {
  changeVis('07_Pasarela_Madera', true);

  operateAnimation('PLAY', getAnimations('07_Pasarela_Madera'), 300, 360, 'LoopOnce', 1,
          function() {}, undefined, false);

      setCSSRuleStyle('borderColor', '#4BE5C5', '#paso6', true,);
  setCSSRuleStyle('backgroundColor', '#CC2264', '#paso6', true,);
  setCSSRuleStyle('color', '#ffffff', '#paso6-t', true,);
  setCSSRuleStyle('fontWeight', '700', '#paso6-t', true,);
  setCSSRuleStyle('fontStyle', 'normal', '#paso6-t', true,);
  setCSSRuleStyle('backgroundColor', '', '#paso5', true,);
  setCSSRuleStyle('borderColor', '#4BE5C5', '#paso5', true,);
  setCSSRuleStyle('color', '#4BE5C5', '#paso5-t', true,);
  setCSSRuleStyle('fontWeight', '400', '#paso5-t', true,);
});
eventHTMLElem('click', 'paso7', true, function(event) {
  changeVis('01_Colector', true);

  operateAnimation('PLAY', getAnimations('01_Colector'), 360, 420, 'LoopOnce', 1,
          function() {}, undefined, false);

      setCSSRuleStyle('borderColor', '#4BE5C5', '#paso7', true,);
  setCSSRuleStyle('backgroundColor', '#CC2264', '#paso7', true,);
  setCSSRuleStyle('color', '#ffffff', '#paso7-t', true,);
  setCSSRuleStyle('fontWeight', '700', '#paso7-t', true,);
  setCSSRuleStyle('fontStyle', 'normal', '#paso7-t', true,);
  setCSSRuleStyle('backgroundColor', '', '#paso6', true,);
  setCSSRuleStyle('borderColor', '#4BE5C5', '#paso6', true,);
  setCSSRuleStyle('color', '#4BE5C5', '#paso6-t', true,);
  setCSSRuleStyle('fontWeight', '400', '#paso6-t', true,);
});
eventHTMLElem('click', 'paso8', true, function(event) {
  changeVis('02_Rápido_Tramo1', true);

  operateAnimation('PLAY', getAnimations('02_Rápido_Tramo1'), 420, 480, 'LoopOnce', 1,
          function() {}, undefined, false);

      setCSSRuleStyle('borderColor', '#4BE5C5', '#paso8', true,);
  setCSSRuleStyle('backgroundColor', '#CC2264', '#paso8', true,);
  setCSSRuleStyle('color', '#ffffff', '#paso8-t', true,);
  setCSSRuleStyle('fontWeight', '700', '#paso8-t', true,);
  setCSSRuleStyle('fontStyle', 'normal', '#paso8-t', true,);
  setCSSRuleStyle('backgroundColor', '', '#paso7', true,);
  setCSSRuleStyle('borderColor', '#4BE5C5', '#paso7', true,);
  setCSSRuleStyle('color', '#4BE5C5', '#paso7-t', true,);
  setCSSRuleStyle('fontWeight', '400', '#paso7-t', true,);
});
eventHTMLElem('click', 'paso9', true, function(event) {
  changeVis('03_Rápido_Tramo2', true);
  changeVis('04_PernosFlanches', true);

  operateAnimation('PLAY', getAnimations('03_Rápido_Tramo2'), 480, 540, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', getAnimations('04_PernosFlanches'), 480, 540, 'LoopOnce', 1,
          function() {}, undefined, false);

      setCSSRuleStyle('borderColor', '#4BE5C5', '#paso9', true,);
  setCSSRuleStyle('backgroundColor', '#CC2264', '#paso9', true,);
  setCSSRuleStyle('color', '#ffffff', '#paso9-t', true,);
  setCSSRuleStyle('fontWeight', '700', '#paso9-t', true,);
  setCSSRuleStyle('fontStyle', 'normal', '#paso9-t', true,);
  setCSSRuleStyle('backgroundColor', '', '#paso8', true,);
  setCSSRuleStyle('borderColor', '#4BE5C5', '#paso8', true,);
  setCSSRuleStyle('color', '#4BE5C5', '#paso8-t', true,);
  setCSSRuleStyle('fontWeight', '400', '#paso8-t', true,);
});
eventHTMLElem('click', 'paso10', true, function(event) {
  changeVis('05_Rápido_Tramo3', true);
  changeVis('06_PernosFlanches', true);

  operateAnimation('PLAY', getAnimations('05_Rápido_Tramo3'), 540, 600, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', getAnimations('06_PernosFlanches'), 540, 600, 'LoopOnce', 1,
          function() {}, undefined, false);

      setCSSRuleStyle('borderColor', '#4BE5C5', '#paso10', true,);
  setCSSRuleStyle('backgroundColor', '#CC2264', '#paso10', true,);
  setCSSRuleStyle('color', '#ffffff', '#paso10-t', true,);
  setCSSRuleStyle('fontWeight', '700', '#paso10-t', true,);
  setCSSRuleStyle('fontStyle', 'normal', '#paso10-t', true,);
  setCSSRuleStyle('backgroundColor', '', '#paso9', true,);
  setCSSRuleStyle('borderColor', '#4BE5C5', '#paso9', true,);
  setCSSRuleStyle('color', '#4BE5C5', '#paso9-t', true,);
  setCSSRuleStyle('fontWeight', '400', '#paso9-t', true,);
});
eventHTMLElem('click', 'paso11', true, function(event) {
  changeVis('07_Rápido_Tramo4', true);
  changeVis('08_PernosFlanches', true);

  operateAnimation('PLAY', getAnimations('07_Rápido_Tramo4'), 600, 660, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', getAnimations('08_PernosFlanches'), 600, 660, 'LoopOnce', 1,
          function() {}, undefined, false);

      setCSSRuleStyle('borderColor', '#4BE5C5', '#paso11', true,);
  setCSSRuleStyle('backgroundColor', '#CC2264', '#paso11', true,);
  setCSSRuleStyle('color', '#ffffff', '#paso11-t', true,);
  setCSSRuleStyle('fontWeight', '700', '#paso11-t', true,);
  setCSSRuleStyle('fontStyle', 'normal', '#paso11-t', true,);
  setCSSRuleStyle('backgroundColor', '', '#paso10', true,);
  setCSSRuleStyle('borderColor', '#4BE5C5', '#paso10', true,);
  setCSSRuleStyle('color', '#4BE5C5', '#paso10-t', true,);
  setCSSRuleStyle('fontWeight', '400', '#paso10-t', true,);
});
eventHTMLElem('click', 'paso12', true, function(event) {
  changeVis('09_Rápido_Tramo5', true);
  changeVis('10_PernosFlanches', true);

  operateAnimation('PLAY', getAnimations('09_Rápido_Tramo5'), 660, 720, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', getAnimations('10_PernosFlanches'), 660, 720, 'LoopOnce', 1,
          function() {}, undefined, false);

      setCSSRuleStyle('borderColor', '#4BE5C5', '#paso12', true,);
  setCSSRuleStyle('backgroundColor', '#CC2264', '#paso12', true,);
  setCSSRuleStyle('color', '#ffffff', '#paso12-t', true,);
  setCSSRuleStyle('fontWeight', '700', '#paso12-t', true,);
  setCSSRuleStyle('fontStyle', 'normal', '#paso12-t', true,);
  setCSSRuleStyle('backgroundColor', '', '#paso11', true,);
  setCSSRuleStyle('borderColor', '#4BE5C5', '#paso11', true,);
  setCSSRuleStyle('color', '#4BE5C5', '#paso11-t', true,);
  setCSSRuleStyle('fontWeight', '400', '#paso11-t', true,);
});
eventHTMLElem('click', 'paso13', true, function(event) {
  changeVis('11_Rápido_Tramo6', true);
  changeVis('12_PernosFlanches_Optimizados', true);

  operateAnimation('PLAY', getAnimations('11_Rápido_Tramo6'), 720, 780, 'LoopOnce', 1,
          function() {}, undefined, false);


  operateAnimation('PLAY', getAnimations('12_PernosFlanches_Optimizados'), 720, 780, 'LoopOnce', 1,
          function() {}, undefined, false);

      setCSSRuleStyle('borderColor', '#4BE5C5', '#paso13', true,);
  setCSSRuleStyle('backgroundColor', '#CC2264', '#paso13', true,);
  setCSSRuleStyle('color', '#ffffff', '#paso13-t', true,);
  setCSSRuleStyle('fontWeight', '700', '#paso13-t', true,);
  setCSSRuleStyle('fontStyle', 'normal', '#paso13-t', true,);
  setCSSRuleStyle('backgroundColor', '', '#paso12', true,);
  setCSSRuleStyle('borderColor', '#4BE5C5', '#paso12', true,);
  setCSSRuleStyle('color', '#4BE5C5', '#paso12-t', true,);
  setCSSRuleStyle('fontWeight', '400', '#paso12-t', true,);
});
eventHTMLElem('click', 'paso14', true, function(event) {
  changeVis('08_Pasarela_Baranda', true);

  operateAnimation('PLAY', getAnimations('08_Pasarela_Baranda'), 780, 840, 'LoopOnce', 1,
          function() {}, undefined, false);

      setCSSRuleStyle('backgroundColor', '', '#paso13', true,);
  setCSSRuleStyle('borderColor', '#4BE5C5', '#paso13', true,);
  setCSSRuleStyle('color', '#4BE5C5', '#paso13-t', true,);
  setCSSRuleStyle('fontWeight', '400', '#paso13-t', true,);
  setCSSRuleStyle('borderColor', '#4BE5C5', '#paso14', true,);
  setCSSRuleStyle('backgroundColor', '#CC2264', '#paso14', true,);
  setCSSRuleStyle('color', '#ffffff', '#paso14-t', true,);
  setCSSRuleStyle('fontWeight', '700', '#paso14-t', true,);
  setCSSRuleStyle('fontStyle', 'normal', '#paso14-t', true,);
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
